public class ComputerGuessesGame {
    private int numGuesses;
    private int lastGuess;

    // upperBound and lowerBound track the computer's knowledge about the correct number
    // They are updated after each guess is made
    private int upperBound; // correct number is <= upperBound
    private int lowerBound; // correct number is >= lowerBound
    private boolean gameIsDone;

    public ComputerGuessesGame() {
        reset();
    }

    /**
     * Sets class variables to defaults
     */
    public void reset() {
        // Init class variables
        numGuesses = 0;
        upperBound = 1000;
        lowerBound = 1;
        gameIsDone = false;

        lastGuess = (lowerBound + upperBound + 1) / 2; // Preserve OBOB error from initial code
    }

    /**
     * Gets the next guess given a GuessResult
     * Returns the last one if game is finished
     * @param result Human response to computer guess
     * @return Next guess
     */
    public int nextGuess(GuessResult result) {
        switch (result) {
            case CORRECT -> gameIsDone = true;
            case LOW -> upperBound = Math.min(upperBound, lastGuess);
            case HIGH -> lowerBound = Math.max(lowerBound, lastGuess + 1);
        }

        newGuess();
        return lastGuess;
    }

    /**
     * Makes a new guess and increments numGuesses
     */
    private void newGuess() {
        if (!gameIsDone) {
            numGuesses += 1;
            lastGuess = (lowerBound + upperBound + 1) / 2;
        }
    }

    /**
     * @return Last guess generated by game
     */
    public int getLastGuess() {
        return lastGuess;
    }

    /**
     * @return Number of guesses generated by game
     */
    public int getNumGuesses() {
        return numGuesses;
    }

    /**
     * @return True if game nextGuess has been called with a GameResult.CORRECT
     * or getResult has been called
     */
    public boolean isDone() {
        return gameIsDone;
    }
}
